
arith_expr : THEORY BEGIN
  V_T : TYPE = below(256)
  V_N_b : nat = 10
  V_N : TYPE = below(V_N_b)
  arith_expr : DATATYPE
  BEGIN
    v(n: int): value?
    add(a, b: arith_expr): add?
    sub(a, b: arith_expr): sub?
    mult(a, b: arith_expr): mult?
    div(a, b: arith_expr): div?
    incorrect: incorrect?
  END arith_expr
  V_S : TYPE = arith_expr
  IMPORTING semantic_parser[V_T, <=, V_N_b, 100, V_S]
  
  ascii_to_integer(chr : below(256)): int = 
    COND
    chr = 48 -> 0,
    chr = 49 -> 1,
    chr = 50 -> 2,
    chr = 51 -> 3,
    chr = 52 -> 4,
    chr = 53 -> 5,
    chr = 54 -> 6,
    chr = 55 -> 7,
    chr = 56 -> 8,
    chr = 57 -> 9,
    ELSE     -> 0
    ENDCOND

  numeric_to_integer(t : ast): int = 
    IF (range?(t)) THEN ascii_to_integer(x(t)) ELSE 0 ENDIF
  
  first_digit(t : pre_ast): int = 
   CASES t OF 
         prior(s, e, t1, t2) : 
            IF (fail?(t1) ∧ range?(t2)) THEN 
                ascii_to_integer(x(t2)) ELSE 
                (IF (seq?(t1) ∧ terminal?(T1(t1)) ∧ range?(T2(t1))) THEN 
                   -1*ascii_to_integer(x(T2(t1))) ELSE 0 ENDIF) ENDIF
         ELSE 0
   ENDCASES
  
  aux(res : int, ts : pre_ast) : Recursive arith_expr =
    CASES ts OF star(s, e, t1, t2) : if (skip?(t2)) THEN v(res) ELSE aux(10*res + numeric_to_integer(t1), t2) ENDIF
    ELSE v(-1000)
    ENDCASES 
  MEASURE astMeasure(ts)

  numeric_seq_to_integer(t : pre_ast) : arith_expr = 
    CASES t OF
      seq(e, s, t1, t2) : aux(first_digit(t1), t2)
      ELSE incorrect
    ENDCASES
  
  operation : TYPE =  [arith_expr, arith_expr -> arith_expr]
  a1, a2 : VAR arith_expr
  mult_op : operation = λ(a1, a2) : mult(a1, a2)
  add_op : operation = λ(a1, a2) : add(a1, a2)
  div_op : operation = λ(a1, a2) : div(a1, a2)
  sub_op : operation = λ(a1, a2) : sub(a1, a2)

  left_assoc_op(t : ast, res : arith_expr, op : operation) : RECURSIVE arith_expr = 
    IF (plus?(t) ∧ ¬fail?(T0(t)) ∧ seq?(T0(t)) ∧ semantic?(T2(T0(t)))) THEN left_assoc_op(Ts(t), op(res, S(T2(T0(t)))), op)
    ELSE res ENDIF
  MEASURE astMeasure(t)

           

END arith_expr


test_ascii : THEORY BEGIN
  IMPORTING arith_expr
  V_T : TYPE = below(256)
  V_N_b : nat = 10
  V_N : TYPE = below(V_N_b)
  V_S : TYPE = arith_expr


  parantheses : int = 1
  
  P_exp : [V_N -> Δ] = λ(A : V_N):
    COND
      A = 0 -> seq(prior(seq(terminal(45), range(49, 57)), range(49,57)), star(range(49,57))),% Number
      A = 1 -> seq(terminal(40), seq(nonTerminal(8), terminal(41))),       % Paranthesed expression
      A = 2 -> prior(nonTerminal(1), nonTerminal(0)),
      A = 3 -> seq(nonTerminal(2), plus(seq(terminal(42), nonTerminal(2)))),   % Multiplication
      A = 4 -> seq(nonTerminal(2), plus(seq(terminal(47), nonTerminal(2)))),   % Division
      A = 5 -> prior(nonTerminal(4), prior(nonTerminal(3), nonTerminal(2))),   % Term for addition/substraction
      A = 6 -> seq(nonTerminal(5), plus(seq(terminal(43), nonTerminal(5)))),   % Addition
      A = 7 -> seq(nonTerminal(5), plus(seq(terminal(45), nonTerminal(5)))),   % Substraction  
      A = 8 -> prior(nonTerminal(7), % sub
               prior(nonTerminal(6), % add
               prior(nonTerminal(4), % div
               prior(nonTerminal(3), % mult
               prior(nonTerminal(1), % parantheses
                     nonTerminal(0)))))), % number
      A = 9 -> nonTerminal(8),
      ELSE  -> ε
    ENDCOND
  
  choose_prior(t : ast) : RECURSIVE arith_expr = 
  IF (semantic?(t)) then S(t) 
  ELSE (
       IF prior?(t) THEN (
          IF (¬fail?(T1(t))) THEN 
             choose_prior(T1(t)) 
          ELSE 
             choose_prior(T2(t)) 
          ENDIF ) 
       ELSE 
          v(-1) 
       ENDIF)
  ENDIF
  MEASURE astMeasure(t) 

  P_inp : [V_N, semanticTree -> V_S] = λ(A: V_N, T: semanticTree) :
    COND
      A = 0 -> numeric_seq_to_integer(T),
      A = 1 -> IF (seq?(T) ∧ seq?(T2(T)) ∧ semantic?(T1(T2(T)))) THEN S(T1(T2(T))) ELSE incorrect ENDIF,
      A = 2 -> choose_prior(T),
      A = 3 -> IF (seq?(T) ∧ semantic?(T1(T)) ∧ plus?(T2(T))) THEN left_assoc_op(T2(T), S(T1(T)), mult_op) ELSE incorrect ENDIF,
      A = 4 -> IF (seq?(T) ∧ semantic?(T1(T)) ∧ plus?(T2(T))) THEN left_assoc_op(T2(T), S(T1(T)), div_op) ELSE incorrect ENDIF,
      A = 5 -> choose_prior(T),
      A = 6 -> IF (seq?(T) ∧ semantic?(T1(T)) ∧ plus?(T2(T))) THEN left_assoc_op(T2(T), S(T1(T)), add_op) ELSE incorrect ENDIF,
      A = 7 -> IF (seq?(T) ∧ semantic?(T1(T)) ∧ plus?(T2(T))) THEN left_assoc_op(T2(T), S(T1(T)), sub_op) ELSE incorrect ENDIF,
      A = 8 -> choose_prior(T),
      ELSE  -> incorrect
    ENDCOND

  entry : V_N = 9
  entry_g : Δ = P_exp(entry)
  parser_semantic : [input -> ast] = λ(inp : input) : (sempp(P_exp, P_inp, entry, entry_g, inp, 0, 0, (λ(A : V_N, s : inp_bound) : unknown))`1)
  parser_ref :      [input -> ast] = λ(inp : input) : parsing(P_exp, entry, entry_g, inp, 0, 0)
  res_sem(inp: input) : V_S = S(parser_semantic(inp))


inp1(x : below(1000)) : V_T = COND 
x = 0 -> 49,
ELSE -> 0 ENDCOND
inp2(x : below(1000)) : V_T = COND 
x = 0 -> 49,
x = 1 -> 43,
x = 2 -> 50,
ELSE -> 0 ENDCOND
inp3(x : below(1000)) : V_T = COND 
x = 0 -> 49,
x = 1 -> 43,
x = 2 -> 50,
x = 3 -> 42,
x = 4 -> 53,
ELSE -> 0 ENDCOND




END test_ascii

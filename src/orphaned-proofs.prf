("ast" ast seq_2_TCC1 0 (seq_2_TCC1-1 nil 3785499487 ("" (subtype-tcc) nil nil) nil nil (seq_2 subtype "ast.T" "{x: pre_ast[ast.V_T, ast.<=, ast.V_N_b, ast.bound, ast.V_S].pre_ast | booleans.OR(pre_ast[ast.V_T, ast.<=, ast.V_N_b, ast.bound, ast.V_S].seq?(x), pre_ast[ast.V_T, ast.<=, ast.V_N_b, ast.bound, ast.V_S].prior?(x))}")))("ast" ast seq_2 0 (seq_2-1 nil 3785499490 ("" (skeep) (("" (typepred "T") (("" (expand "astWellformed?") (("" (assert) (("" (flatten) (("" (assert) (("" (expand "astType?" 2 1) (("" (lift-if 2) (("" (split 2) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((ast type-eq-decl nil ast nil) (astWellformed? def-decl "bool" ast nil) (pre_ast type-decl nil pre_ast nil) (V_S formal-type-decl nil ast nil) (bound formal-const-decl "nat" ast nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (V_N_b formal-const-decl "posnat" ast nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (<= formal-const-decl "(total_order?[V_T])" ast nil) (total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (V_T formal-nonempty-type-decl nil ast nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (astType? def-decl "astType" ast nil)) shostak))("json" json_parser extract_number_TCC1 0 (extract_number_TCC1-1 nil 3786428596 ("" (skeep) (("" (ground) nil nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (extract_number disjointness "TABLE
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  |[ json_parser.x = 48 | json_parser.x = 49 | json_parser.x = 50 | json_parser.x = 51 | json_parser.x = 52 | json_parser.x = 53 | json_parser.x = 54 | json_parser.x = 55 | json_parser.x = 56 | json_parser.x = 57 | booleans.∨(reals.<(json_parser.x, 48), reals.>(json_parser.x, 57)) ]|
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  | 0                   | 1                  | 2                  | 3                  | 4                  | 5                  | 6                  | 7                  | 8                  | 9                  | 0                                                                  ||
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
ENDTABLE" "nil")))("json" json_parser extract_number_TCC2 0 (extract_number_TCC2-1 nil 3786428596 ("" (skeep) (("" (assert) nil nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (extract_number coverage "TABLE
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  |[ json_parser.x = 48 | json_parser.x = 49 | json_parser.x = 50 | json_parser.x = 51 | json_parser.x = 52 | json_parser.x = 53 | json_parser.x = 54 | json_parser.x = 55 | json_parser.x = 56 | json_parser.x = 57 | booleans.∨(reals.<(json_parser.x, 48), reals.>(json_parser.x, 57)) ]|
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  | 0                   | 1                  | 2                  | 3                  | 4                  | 5                  | 6                  | 7                  | 8                  | 9                  | 0                                                                  ||
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
ENDTABLE" "nil")))
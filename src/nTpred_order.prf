(nTpred_order
 (leq_tr 0
  (leq_tr-1 nil 3770154313
   ("" (skeep)
    (("" (expand "<=")
      (("" (expand "leq")
        (("" (skeep)
          (("" (inst -1 "i")
            (("" (inst -2 "i")
              (("" (flatten)
                (("" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil)
                   ("3" (flatten) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (V_N type-eq-decl nil nTpred_order nil)
    (V_N_b formal-const-decl "posnat" nTpred_order nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (leq const-decl "bool" nTpred_order nil))
   shostak))
 (leq_rf 0
  (leq_rf-1 nil 3770154378
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "<=")
          (("1" (expand "leq")
            (("1" (decompose-equality 1)
              (("1" (decompose-equality 1)
                (("1" (inst -1 "x!1")
                  (("1" (inst -2 "x!1")
                    (("1" (flatten)
                      (("1" (iff 1)
                        (("1" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (decompose-equality 1)
                (("2" (inst -1 "x!1")
                  (("2" (inst -2 "x!1")
                    (("2" (flatten)
                      (("2" (iff 1)
                        (("2" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (decompose-equality 1)
                (("3" (inst -1 "x!1")
                  (("3" (inst -2 "x!1")
                    (("3" (flatten)
                      (("3" (iff 1)
                        (("3" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "<=")
          (("2" (expand "leq")
            (("2" (replace -1 * LR)
              (("2" (assert)
                (("2" (split 1)
                  (("1" (skeep)
                    (("1" (split 1)
                      (("1" (flatten) nil nil) ("2" (flatten) nil nil)
                       ("3" (flatten) nil nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (split 1)
                      (("1" (flatten) nil nil) ("2" (flatten) nil nil)
                       ("3" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" nTpred_order nil)
    (nTpred type-eq-decl nil nTpred_order nil)
    (nTprop type-eq-decl nil nTpred_order nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (V_N_b formal-const-decl "posnat" nTpred_order nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (leq const-decl "bool" nTpred_order nil))
   shostak))
 (leq_dist 0
  (leq_dist-1 nil 3770390076
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "<=")
          (("1" (expand "leq")
            (("1" (expand "leq_pred")
              (("1" (split 1)
                (("1" (skeep 1)
                  (("1" (inst -2 "i")
                    (("1" (flatten) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skeep 1)
                  (("2" (inst -2 "i")
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (skeep 1)
                  (("3" (inst -2 "i")
                    (("3" (flatten) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "<=")
          (("2" (expand "leq")
            (("2" (skeep)
              (("2" (expand "leq_pred")
                (("2" (inst -1 "i")
                  (("2" (inst -2 "i")
                    (("2" (inst -3 "i")
                      (("2" (split 1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil (leq_pred const-decl "bool" nTpred_order nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (V_N_b formal-const-decl "posnat" nTpred_order nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (leq const-decl "bool" nTpred_order nil))
   shostak)))


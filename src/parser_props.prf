(parser_props
 (parsing_correctness_ε_TCC1 0
  (parsing_correctness_ε_TCC2-1 nil 3785592840 ("" (assert) nil nil)
   nil nil
   (parsing_correctness_ε subtype "parser_props.A"
    "naturalnumbers.upto(parser_props.V_N_b)")))
 (parsing_correctness_ε 0
  (parsing_correctness_ε-1 nil 3785774406
   ("" (skeep)
    (("" (assert)
      (("" (expand "parsing")
        (("" (expand "astType?")
          (("" (expand " ⊤") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((astType? def-decl "astType" ast nil)
    (⊤ const-decl "astType" parser_props nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil))
   shostak))
 (parsing_correctness_any 0
  (parsing_correctness_any-1 nil 3785839893
   ("" (skeep)
    (("" (assert)
      (("" (expand "⊥")
        (("" (expand " ⊤")
          (("" (expand "parsing")
            (("" (expand "astType?")
              (("" (expand "min")
                (("" (assert) (("" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (⊤ const-decl "astType" parser_props nil)
    (astType? def-decl "astType" ast nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (⊥ const-decl "astType" parser_props nil))
   shostak))
 (parsing_correctness_terminal 0
  (parsing_correctness_terminal-1 nil 3785840037
   ("" (skeep)
    (("" (expand "⊥")
      (("" (expand " ⊤")
        (("" (expand "parsing")
          (("" (expand "min")
            (("" (expand "astType?") (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((⊥ const-decl "astType" parser_props nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (astType? def-decl "astType" ast nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (⊤ const-decl "astType" parser_props nil))
   shostak))
 (parsing_correctness_nonTerminal_TCC1 0
  (parsing_correctness_nonTerminal_TCC3-1 nil 3785592840
   ("" (expand "subterm") (("" (propax) nil nil)) nil)
   ((subterm adt-def-decl "boolean" peg nil)) nil
   (parsing_correctness_nonTerminal subtype
    "parser_props.P_exp(parser_props.B)"
    "{e: wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].Δ | peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].subterm(e, parser_props.P_exp(parser_props.B))}")))
 (parsing_correctness_nonTerminal_TCC2 0
  (parsing_correctness_nonTerminal_TCC4-1 nil 3785592840
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (V_N type-eq-decl nil nTpred_order nil) (peg type-decl nil peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (<= const-decl "bool" reals nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (g_wf def-decl "bool" wf_peg nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonTerminal? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (nonTerminal adt-constructor-decl
     "[below(V_N_b) -> (nonTerminal?)]" peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nT_properties const-decl "F(P_exp)" wf_peg nil)
    (output type-eq-decl nil peg_parser nil)
    (P_fc? const-decl "[Δ -> bool]" wf_peg nil)
    (failure adt-constructor-decl "(failure?)" ast nil)
    (failure? adt-recognizer-decl "[astType -> boolean]" ast nil)
    (P_sc? const-decl "[Δ -> bool]" wf_peg nil)
    (e shared-adt-accessor-decl "[pre_ast -> below]" pre_ast nil)
    (success adt-constructor-decl "(success?)" ast nil)
    (success? adt-recognizer-decl "[astType -> boolean]" ast nil)
    (astType? def-decl "astType" ast nil)
    (astType type-decl nil ast nil)
    (trueToInput def-decl "bool" ast_props nil)
    (input type-eq-decl nil ast_props nil)
    (inp_bound type-eq-decl nil ast_props nil)
    (trueToGrammar def-decl "bool" ast_props nil)
    (skip? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (s shared-adt-accessor-decl "[pre_ast -> below]" pre_ast nil)
    (below type-eq-decl nil pre_ast nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ast type-eq-decl nil ast nil)
    (astWellformed? def-decl "bool" ast nil)
    (pre_ast type-decl nil pre_ast nil)
    (V_S formal-type-decl nil parser_props nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (strong const-decl "bool" wf_peg nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parsing_correctness_nonTerminal subtype "parser_props.s"
    "{k: naturalnumbers.upto(parser_props.s) | booleans.⇒((k = parser_props.s), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(parser_props.P_exp(parser_props.B), parser_props.B, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_nonTerminal 0
  (parsing_correctness_nonTerminal-1 nil 3785840535
   ("" (skeep*)
    (("" (assert)
      (("" (expand "parsing" 1 1)
        (("" (expand "parsing" 1 4)
          (("" (assert)
            (("" (expand "astType?" 1 1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (astType? def-decl "astType" ast nil))
   shostak))
 (parsing_correctness_seq_TCC1 0
  (parsing_correctness_seq_TCC1-1 nil 3785592840
   ("" (skeep*)
    (("" (typepred "s_T")
      (("" (assert)
        (("" (expand "g_wf" -) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((strong const-decl "bool" wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (< const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" peg nil)
    (seq adt-constructor-decl "[[peg, peg] -> (seq?)]" peg nil)
    (seq? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (g_wf def-decl "bool" wf_peg nil) (peg type-decl nil peg nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parsing_correctness_seq subtype "parser_props.s_T"
    "{k: naturalnumbers.upto(parser_props.s) | booleans.⇒((k = parser_props.s), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(parser_props.e1, parser_props.A, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_seq_TCC2 0
  (parsing_correctness_seq_TCC2-1 nil 3785592840
   ("" (skeep*)
    (("" (typepred "parsing(P_exp, A, e1, inp, s, s_T)")
      (("" (lemma "Wellformed_theorem")
        (("" (inst -1 "T1")
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (typepred "s_T")
                      (("" (assert)
                        (("" (expand "g_wf" -2)
                          (("" (flatten)
                            (("" (expand "strong")
                              ((""
                                (assert)
                                ((""
                                  (expand "⊥")
                                  ((""
                                    (expand " ⊤")
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq adt-constructor-decl "[[peg, peg] -> (seq?)]" peg nil)
    (seq? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (output type-eq-decl nil peg_parser nil)
    (P_fc? const-decl "[Δ -> bool]" wf_peg nil)
    (failure adt-constructor-decl "(failure?)" ast nil)
    (failure? adt-recognizer-decl "[astType -> boolean]" ast nil)
    (P_sc? const-decl "[Δ -> bool]" wf_peg nil)
    (e shared-adt-accessor-decl "[pre_ast -> below]" pre_ast nil)
    (success adt-constructor-decl "(success?)" ast nil)
    (success? adt-recognizer-decl "[astType -> boolean]" ast nil)
    (astType? def-decl "astType" ast nil)
    (astType type-decl nil ast nil)
    (trueToInput def-decl "bool" ast_props nil)
    (trueToGrammar def-decl "bool" ast_props nil)
    (skip? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (plus? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (plus? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (star? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (star? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (s shared-adt-accessor-decl "[pre_ast -> below]" pre_ast nil)
    (below type-eq-decl nil pre_ast nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ast type-eq-decl nil ast nil)
    (strong const-decl "bool" wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (g_wf def-decl "bool" wf_peg nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (input type-eq-decl nil ast_props nil)
    (inp_bound type-eq-decl nil ast_props nil)
    (<= const-decl "bool" reals nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subterm adt-def-decl "boolean" peg nil)
    (peg type-decl nil peg nil)
    (below type-eq-decl nil naturalnumbers nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (astWellformed? def-decl "bool" ast nil)
    (pre_ast type-decl nil pre_ast nil)
    (V_S formal-type-decl nil parser_props nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (⊥ const-decl "astType" parser_props nil)
    (⊤ const-decl "astType" parser_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Wellformed_theorem formula-decl nil ast nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parsing_correctness_seq subtype "parser_props.s_T"
    "{k: naturalnumbers.upto(pre_ast[parser_props.V_T, parser_props.<=, parser_props.V_N_b, parser_props.bound, parser_props.V_S].e(parser_props.T1)) | booleans.⇒((k = pre_ast[parser_props.V_T, parser_props.<=, parser_props.V_N_b, parser_props.bound, parser_props.V_S].e(parser_props.T1)), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(parser_props.e2, parser_props.A, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_seq 0
  (parsing_correctness_seq-1 nil 3785840864
   ("" (skeep*)
    (("" (expand "⊥")
      (("" (expand " ⊤")
        (("" (assert)
          (("" (expand "parsing" 1 2)
            (("" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (expand "astType?" 1) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "parsing" 1 1)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (assert)
                          (("1" (expand "astType?" 1 1)
                            (("1" (lift-if) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "parsing" 1 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((⊥ const-decl "astType" parser_props nil)
    (astType? def-decl "astType" ast nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (⊤ const-decl "astType" parser_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (parsing_correctness_prior_TCC1 0
  (parsing_correctness_prior_TCC1-1 nil 3785592840
   ("" (skeep*)
    (("" (typepred "s_T")
      (("" (expand "g_wf" -2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((strong const-decl "bool" wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (< const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" peg nil)
    (prior adt-constructor-decl "[[peg, peg] -> (prior?)]" peg nil)
    (prior? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (g_wf def-decl "bool" wf_peg nil) (peg type-decl nil peg nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parsing_correctness_prior subtype "parser_props.s_T"
    "{k: naturalnumbers.upto(parser_props.s) | booleans.⇒((k = parser_props.s), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(parser_props.e1, parser_props.A, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_prior_TCC2 0
  (parsing_correctness_prior_TCC3-1 nil 3785592840
   ("" (skeep*)
    (("" (typepred "s_T")
      (("" (expand "g_wf" -2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((strong const-decl "bool" wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (< const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" peg nil)
    (prior adt-constructor-decl "[[peg, peg] -> (prior?)]" peg nil)
    (prior? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (g_wf def-decl "bool" wf_peg nil) (peg type-decl nil peg nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parsing_correctness_prior subtype "parser_props.s_T"
    "{k: naturalnumbers.upto(parser_props.s) | booleans.⇒((k = parser_props.s), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(parser_props.e2, parser_props.A, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_prior 0
  (parsing_correctness_prior-1 nil 3785841016
   ("" (skeep*)
    (("" (expand "⊥")
      (("" (expand " ⊤")
        (("" (expand "parsing" 1 2)
          (("" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "astType?" 1 1)
                  (("1" (assert)
                    (("1" (expand "parsing" 1 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "parsing" 1 1)
                  (("2" (expand "astType?" 1 1)
                    (("2" (split 1)
                      (("1" (lift-if) (("1" (assert) nil nil)) nil)
                       ("2" (expand "parsing" 1 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((⊥ const-decl "astType" parser_props nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (astType? def-decl "astType" ast nil)
    (⊤ const-decl "astType" parser_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (parsing_correctness_star_TCC1 0
  (parsing_correctness_star_TCC1-1 nil 3785592840
   ("" (skeep*)
    (("" (typepred "s_T")
      (("" (expand "g_wf" -) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((strong const-decl "bool" wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (< const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" peg nil)
    (star adt-constructor-decl "[peg -> (star?)]" peg nil)
    (star? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (g_wf def-decl "bool" wf_peg nil) (peg type-decl nil peg nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parsing_correctness_star subtype "parser_props.s_T"
    "{k: naturalnumbers.upto(parser_props.s) | booleans.⇒((k = parser_props.s), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(parser_props.e, parser_props.A, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_star_TCC2 0
  (parsing_correctness_star_TCC3-1 nil 3785592840
   ("" (skeep*)
    (("" (typepred "s_T")
      (("" (typepred " parsing(P_exp, A, e, inp, s, s_T)")
        (("" (lemma "Wellformed_theorem")
          (("" (inst -1 "T0")
            (("" (assert)
              (("" (flatten)
                (("" (assert)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strong const-decl "bool" wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (< const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" peg nil)
    (star adt-constructor-decl "[peg -> (star?)]" peg nil)
    (star? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (g_wf def-decl "bool" wf_peg nil) (peg type-decl nil peg nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Wellformed_theorem formula-decl nil ast nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (V_S formal-type-decl nil parser_props nil)
    (pre_ast type-decl nil pre_ast nil)
    (astWellformed? def-decl "bool" ast nil)
    (below type-eq-decl nil naturalnumbers nil)
    (inp_bound type-eq-decl nil ast_props nil)
    (input type-eq-decl nil ast_props nil)
    (ast type-eq-decl nil ast nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil pre_ast nil)
    (s shared-adt-accessor-decl "[pre_ast -> below]" pre_ast nil)
    (star? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (plus? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (plus? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (skip? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (trueToGrammar def-decl "bool" ast_props nil)
    (trueToInput def-decl "bool" ast_props nil)
    (astType type-decl nil ast nil)
    (astType? def-decl "astType" ast nil)
    (success? adt-recognizer-decl "[astType -> boolean]" ast nil)
    (success adt-constructor-decl "(success?)" ast nil)
    (e shared-adt-accessor-decl "[pre_ast -> below]" pre_ast nil)
    (P_sc? const-decl "[Δ -> bool]" wf_peg nil)
    (failure? adt-recognizer-decl "[astType -> boolean]" ast nil)
    (failure adt-constructor-decl "(failure?)" ast nil)
    (P_fc? const-decl "[Δ -> bool]" wf_peg nil)
    (output type-eq-decl nil peg_parser nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parsing_correctness_star subtype "parser_props.s_T"
    "{k: naturalnumbers.upto(pre_ast[parser_props.V_T, parser_props.<=, parser_props.V_N_b, parser_props.bound, parser_props.V_S].e(parser_props.T0)) | booleans.⇒((k = pre_ast[parser_props.V_T, parser_props.<=, parser_props.V_N_b, parser_props.bound, parser_props.V_S].e(parser_props.T0)), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].star(parser_props.e), parser_props.A, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_star 0
  (parsing_correctness_star-1 nil 3785841197
   ("" (skeep*)
    (("" (assert)
      (("" (expand "⊥")
        (("" (expand " ⊤")
          (("" (split 1)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "parsing" 1 1)
                  (("1" (expand "astType?" 1 1)
                    (("1" (expand "parsing" 1 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "parsing" 1 1)
                  (("2" (expand "astType?" 1 1)
                    (("2" (expand "parsing" 1 1)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((⊤ const-decl "astType" parser_props nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (astType? def-decl "astType" ast nil)
    (⊥ const-decl "astType" parser_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (parsing_correctness_notP_TCC1 0
  (parsing_correctness_notP_TCC2-1 nil 3785592840
   ("" (skeep*)
    (("" (typepred "s_T")
      (("" (assert)
        (("" (expand "g_wf" -) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((strong const-decl "bool" wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (WF_nT type-eq-decl nil wf_peg nil)
    (strong_WF const-decl "bool" wf_peg nil)
    (interp type-eq-decl nil wf_peg nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (< const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" peg nil)
    (notP adt-constructor-decl "[peg -> (notP?)]" peg nil)
    (notP? adt-recognizer-decl "[peg -> boolean]" peg nil)
    (g_wf def-decl "bool" wf_peg nil) (peg type-decl nil peg nil)
    (V_N_b formal-const-decl "posnat" parser_props nil)
    (<= formal-const-decl "(total_order?[V_T])" parser_props nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil parser_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "posnat" parser_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parsing_correctness_notP subtype "parser_props.s_T"
    "{k: naturalnumbers.upto(parser_props.s) | booleans.⇒((k = parser_props.s), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].g_wf(parser_props.e, parser_props.A, wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].P_0c?(parser_props.P_exp), wf_peg[parser_props.V_T, parser_props.<=, parser_props.V_N_b].strong))}")))
 (parsing_correctness_notP 0
  (parsing_correctness_notP-1 nil 3785841330
   ("" (skeep*)
    (("" (expand "⊥")
      (("" (expand " ⊤")
        (("" (split 1)
          (("1" (flatten)
            (("1" (assert)
              (("1" (expand "parsing" 1 1)
                (("1" (expand "astType?" 1 1)
                  (("1" (assert)
                    (("1" (expand "parsing" 1 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "parsing" 1 2)
            (("2" (expand "astType?" 1 2)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((⊥ const-decl "astType" parser_props nil)
    (astType? def-decl "astType" ast nil)
    (parsing def-decl "output(P_exp, A, G, inp, s, s_T)" peg_parser
     nil)
    (⊤ const-decl "astType" parser_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))


(ast_tools
 (extract_prior_TCC1 0
  (extract_prior_TCC1-1 nil 3786025451
   ("" (assert)
    (("" (skeep)
      (("" (typepred "T")
        (("" (expand "astWellformed?" -)
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (split -4)
                  (("1" (replace -7 * LR) (("1" (assert) nil nil)) nil)
                   ("2" (assert)
                    (("2" (replace -6 * LR)
                      (("2" (assert)
                        (("2" (expand "astType?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((astType? def-decl "astType" ast nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (V_T formal-nonempty-type-decl nil ast_tools nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[V_T])" ast_tools nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (V_N_b formal-const-decl "posnat" ast_tools nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "nat" ast_tools nil)
    (V_S formal-type-decl nil ast_tools nil)
    (pre_ast type-decl nil pre_ast nil)
    (astWellformed? def-decl "bool" ast nil)
    (ast type-eq-decl nil ast nil))
   nil
   (extract_prior subtype "ast_tools.T2"
    "ast[V_T, <=, V_N_b, bound, V_S]")))
 (extract_prior_TCC2 0
  (extract_prior_TCC2-1 nil 3786025451
   ("" (skeep*)
    (("" (typepred "T")
      (("" (expand "astWellformed?" -)
        (("" (assert)
          (("" (replace -2 * LR) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((ast type-eq-decl nil ast nil)
    (astWellformed? def-decl "bool" ast nil)
    (pre_ast type-decl nil pre_ast nil)
    (V_S formal-type-decl nil ast_tools nil)
    (bound formal-const-decl "nat" ast_tools nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (V_N_b formal-const-decl "posnat" ast_tools nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<= formal-const-decl "(total_order?[V_T])" ast_tools nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (V_T formal-nonempty-type-decl nil ast_tools nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (extract_prior subtype "ast_tools.T1"
    "ast[V_T, <=, V_N_b, bound, V_S]")))
 (extract_prior_TCC3 0
  (extract_prior_TCC3-1 nil 3786025451
   ("" (expand "astWellformed?")
    (("" (skeep)
      (("" (typepred "T")
        (("" (lemma "Wellformed_theorem")
          (("" (inst? -) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Wellformed_theorem formula-decl nil ast nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (V_T formal-nonempty-type-decl nil ast_tools nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[V_T])" ast_tools nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (V_N_b formal-const-decl "posnat" ast_tools nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bound formal-const-decl "nat" ast_tools nil)
    (V_S formal-type-decl nil ast_tools nil)
    (pre_ast type-decl nil pre_ast nil) (ast type-eq-decl nil ast nil)
    (astWellformed? def-decl "bool" ast nil))
   nil
   (extract_prior subtype
    "pre_ast[ast_tools.V_T, ast_tools.<=, ast_tools.V_N_b, ast_tools.bound, ast_tools.V_S].fail(pre_ast[ast_tools.V_T, ast_tools.<=, ast_tools.V_N_b, ast_tools.bound, ast_tools.V_S].s(ast_tools.T), pre_ast[ast_tools.V_T, ast_tools.<=, ast_tools.V_N_b, ast_tools.bound, ast_tools.V_S].e(ast_tools.T))"
    "ast[V_T, <=, V_N_b, bound, V_S]"))))

